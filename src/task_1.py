#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Решите задания лабораторной работы с помощью языка программирования Python и
# элементов программного кода лабораторной работы 1
# (имя файла начинается с PR.AI.001.). Проверьте правильность решения каждой
# задачи на приведенных тестовых примерах.


from dependencies import (
    Problem,
    breadth_first_search,
    failure,
    path_actions,
    path_states,
)

# Определение графа
graph = {
    "Гудермес": {
        "Знаменское": 100,
        "Сунжа": 99,
        "Урус-Мартан": 64,
        "Шали": 35,
        "Курчалой": 19,
        "Хасавюрт": 45,
        "Кизляр": 91,
    },
    "Знаменское": {"Гудермес": 100, "Сунжа": 62},
    "Сунжа": {"Знаменское": 62, "Гудермес": 99, "Ачхой-Мартан": 30},
    "Ачхой-Мартан": {"Сунжа": 30, "Урус-Мартан": 24},
    "Урус-Мартан": {"Ачхой-Мартан": 24, "Гудермес": 64, "Шали": 37},
    "Шали": {"Гудермес": 35, "Курчалой": 19, "Урус-Мартан": 37},
    "Курчалой": {"Ведено": 39, "Гудермес": 19, "Шали": 19},
    "Ведено": {"Курчалой": 39, "Хасавюрт": 90},
    "Хасавюрт": {
        "Гудермес": 45,
        "Кизляр": 83,
        "Бабаюрт": 50,
        "Кизилюрт": 30,
        "Ведено": 90,
        "Хунзах": 168,
    },
    "Кизляр": {"Гудермес": 91, "Хасавюрт": 83, "Бабаюрт": 35, "Тарумовка": 39},
    "Бабаюрт": {"Кизляр": 35, "Хасавюрт": 50, "Сулак": 78},
    "Кизилюрт": {"Хасавюрт": 30, "Сулак": 63, "Семендер": 33, "Буйнакск": 60},
    "Семендер": {"Кизилюрт": 57, "Сулак": 40, "Буйнакск": 38, "Каспийск": 33},
    "Сулак": {"Семендер": 40, "Кизилюрт": 63, "Бабаюрт": 78},
    "Буйнакск": {
        "Семендер": 38,
        "Кизилюрт": 60,
        "Хунзах": 95,
        "Гуниб": 63,
        "Леваши": 64,
    },
    "Леваши": {"Гуниб": 48, "Буйнакск": 64, "Сергокала": 41},
    "Сергокала": {"Леваши": 41, "Каспийск": 65, "Каякент": 40},
    "Каспийск": {"Сергокала": 65, "Избербаш": 51, "Семендер": 33},
    "Избербаш": {"Каспийск": 51, "Каякент": 28},
    "Каякент": {"Избербаш": 28, "Сергокала": 40},
    "Хунзах": {"Буйнакск": 95, "Гуниб": 63, "Хасавюрт": 168},
    "Гуниб": {"Хунзах": 63, "Буйнакск": 63, "Леваши": 48},
    "Кочубей": {"Тарумовка": 183},
    "Терекли-Муктеб": {"Тарумовка": 69},
    "Тарумовка": {"Кочубей": 183, "Терекли-Муктеб": 69},
}


# Создадим конкретную задачу, наследуя Problem
class SimpleGraphProblem(Problem):
    def __init__(self, initial, goal, graph, **kwds):
        # Инициализация задачи с начальным и целевым состоянием, а также графом
        super().__init__(initial, goal, **kwds)
        self.graph = graph

    def actions(self, state):
        """Возвращает список всех доступных переходов для данного состояния"""
        # Возвращаем все соседние города
        return self.graph.get(state, {})

    def result(self, state, action):
        """Возвращает новое состояние при применении действия"""
        # Переход в указанный соседний город
        return action

    def action_cost(self, s, a, s1):
        """Стоимость действия - в этом случае всегда 1"""
        # Стоимость перехода (расстояние между городами)
        return 1


if __name__ == "__main__":
    # Начальное и целевое состояние задачи
    initial_state = "Знаменское"
    goal_state = "Леваши"

    # Создаем объект задачи
    problem = SimpleGraphProblem(initial=initial_state, goal=goal_state, graph=graph)

    # Используем поиск в ширину для нахождения решения
    solution_node = breadth_first_search(problem)

    if solution_node != failure:
        path = path_states(solution_node)
        actions = path_actions(solution_node)
        print(f"Путь до цели: {path}")
        print(f"Действия: {actions}")
    else:
        print("Решение не найдено.")
