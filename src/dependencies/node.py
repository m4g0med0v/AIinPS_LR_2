class Node:
    "Узел в дереве поиска"

    def __init__(self, state, parent=None, action=None, path_cost=0.0) -> None:
        """
        Инициализирует узел в дереве поиска.

        :param state: состояние, которое представляет узел.
        :param parent: родительский узел (если есть).
        :param action: действие, которое привело к этому состоянию (если есть).
        :param path_cost: стоимость пути от начального состояния до этого узла.
        """
        self.state = state  # Состояние узла
        self.parent = parent  # Родительский узел
        self.action = action  # Действие, которое привело к текущему состоянию
        self.path_cost = path_cost  # Стоимость пути от начальной точки до этого узла

    def __repr__(self):
        """
        Представление узла для отладки.

        :return: строковое представление состояния узла.
        """
        return "<{}>".format(self.state)

    def __len__(self):
        """
        Возвращает длину пути от корня дерева до текущего узла.
        Это количество шагов, которое необходимо, чтобы добраться до текущего состояния.

        :return: длина пути (количество шагов от корня до этого узла).
        """
        return 0 if self.parent is None else (1 + len(self.parent))

    def __lt__(self, other) -> bool:
        """
        Сравнение двух узлов по стоимости пути. Используется для упорядочивания узлов, например, в очереди с приоритетом.

        :param other: другой узел, с которым происходит сравнение.
        :return: True, если стоимость пути текущего узла меньше, чем у другого узла.
        """
        return self.path_cost < other.path_cost
