class Problem:
    """Абстрактный класс для формальной задачи. Новый домен
    специализирует этот класс,
    переопределяя `actions` и `results`, и, возможно, другие методы.
    Эвристика по умолчанию равна 0, а стоимость действия по умолчанию
    равна 1 для всех состояний.
    Когда вы создаете экземпляр подкласса, укажите `начальное` и
    `целевое` состояния
    (или задайте метод `is_goal`) и, возможно, другие ключевые слова для
    подкласса.
    """

    def __init__(self, initial=None, goal=None, **kwds):
        """
        :param initial: Начальное состояние задачи.
        :param goal: Целевое состояние задачи.
        :param kwds: Дополнительные параметры, которые могут использоваться
         подклассами.
        """
        self.initial = initial
        self.goal = goal
        self.__dict__.update(kwds)

    def actions(self, state):
        """
        Возвращает список возможных действий для заданного состояния.

        :param state: Текущее состояние.
        :return: Список действий.
        """
        raise NotImplementedError

    def result(self, state, action):
        """
        Возвращает состояние, полученное после выполнения действия из заданного
        состояния.

        :param state: Текущее состояние.
        :param action: Выполняемое действие.
        :return: Новое состояние.
        """
        return NotImplementedError

    def is_goal(self, state):
        """
        Проверяет, является ли состояние целевым.

        :param state: Состояние для проверки.
        :return: True, если состояние целевое, иначе False.
        """
        return state == self.goal

    def action_cost(self, s, a, s1):
        """
        Возвращает стоимость выполнения действия.

        :param s: Текущее состояние.
        :param a: Действие.
        :param s1: Результирующее состояние.
        :return: Стоимость выполнения действия (по умолчанию 1).
        """
        return 1

    def h(self, node):
        """
        Эвристическая функция для оценки расстояния до целевого состояния.

        :param node: Узел, для которого вычисляется эвристика.
        :return: Значение эвристики (по умолчанию 0).
        """
        return 0

    def __str__(self):
        """
        Возвращает строковое представление задачи.

        :return: Строка с информацией о задаче.
        """
        return "{}({!r}, {!r})".format(type(self).__name__, self.initial, self.goal)
